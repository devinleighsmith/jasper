#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e

S2I_EXE=s2i
if [ -z "$(type -P "$S2I_EXE")" ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME-jasper}"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

  Usage: $0 {start|debug|stop|build}

  Options:

  build - Build the docker images for the project.
          You need to do this first, since the builds require some s2i builds.
          You can build individual components as shown below, components that have dependencies
          will have these dependencies built too.  By default all components are built.

          Examples:
          - Build everything:
            $0 build
          - Build the web UI only:
            $0 build web

          Containers:
            - web
            - web-dev
            - api
            - transitory-documents-api

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yaml file.
          Example:
            $0 start

  debug - Used for local development that enables hot reloading for FE and BE.
                Creates the application containers from the built images
                and starts the services based on the docker-compose.yaml file.
                Example:
                  $0 debug

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  dowm | rm - Brings down the services and removes the volumes (storage) and containers. Destructive.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
RUNTIME_CONTAINERS="db-pg db-mongo api web transitory-documents-api"
DEBUG_CONTAINERS="db-pg db-mongo api web-dev transitory-documents-api"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-all() {
  build-web
  build-web-dev
  build-api
  build-transitory-documents-api
}

build-api() {
  #
  # api
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building api image using docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "${COMPOSE_PROJECT_NAME}-api" \
    -f './api/Dockerfile.dev' '..'

  echo -e "===================================================================================================="
}

build-transitory-documents-api() {
  #
  # transitory-documents-api
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building ${COMPOSE_PROJECT_NAME}-transitory-documents-api image using docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "${COMPOSE_PROJECT_NAME}-transitory-documents-api" \
    -f './transitory-documents-api/Dockerfile.release' '..'

  echo -e "===================================================================================================="
}

build-web() {
  #
  # web
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building the ${COMPOSE_PROJECT_NAME}-web image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "${COMPOSE_PROJECT_NAME}-web" \
    --build-arg IMAGE_PREFIX=${COMPOSE_PROJECT_NAME}- \
    --build-arg NODE_VERSION=22 \
    --build-arg NGINX_RUNTIME_SRC='../docker/nginx-runtime' \
    --build-arg VUE_ON_NGINX_SRC='../docker/vue-on-nginx' \
    --build-arg WEB_SRC='./web' \
    -f './web/Dockerfile.release' '..'
  echo -e "===================================================================================================="
}

build-web-dev() {
  #
  # web-dev
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building the ${COMPOSE_PROJECT_NAME}-web-dev image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "${COMPOSE_PROJECT_NAME}-web-dev" \
    --build-arg NODE_VERSION=22 \
    --build-arg VITE_PORT=1339 \
    --build-arg WEB_SRC='./web' \
    -f './web/Dockerfile.local' '..'
  echo -e "===================================================================================================="
}

configureEnvironment () {

  if [ -f .env ]; then
    echo -e "\nLoading environment variables from .env ...\n"
    source .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # Default database startup parameters
  export POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE:-appdb}
  export POSTGRESQL_USER=${POSTGRESQL_USER:-${COMPOSE_PROJECT_NAME}}
  export POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-jeKEumGzuRVY4EJyfcUk}
  export POSTGRESQL_ADMIN_PASSWORD=${POSTGRESQL_ADMIN_PASSWORD:-yM%J]7RZgY@!zb=*#4kB}

  # Default web startup parameters
  export API_URL=${API_URL-http://api:5000/api/}
  export WEB_BASE_HREF=${WEB_BASE_HREF-/jasper/}
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
      if [ -z "$DEBUG_MODE" ]; then
        CONTAINERS="$RUNTIME_CONTAINERS"
      else
        CONTAINERS="$DEBUG_CONTAINERS"
      fi
  fi

  echo ${ARGS} ${CONTAINERS}
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern} | cat)

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/.cache
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "$COMMAND" in
  start)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up ${_startupParams}
    ;;
  debug)
    export DEBUG_MODE=1
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up ${_startupParams}
    ;;
  stop)
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment
    deleteVolumes
    ;;
  build)
    buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^vcr-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      eval "build-${buildImage}"
    else
      echo -e "Error:\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  *)
    usage
esac

popd >/dev/null
